c
play_time / total_play_time
play_time
c
total_play_time
c
@data_hash["플레이 시간"].to_i
@data_hash["플레이 시간"]
total_play_time.to_i
@data_hash
total_play_time.score
total_play_time.value
total_play_time
c
total_play_time
user_type.over_user_scores.blank?
c
user_type.over_user_scores.blank?
c
user_type.over_user_scores.blank?
c
user_type.over_user_scores.blank?
exit
c
OverUserScore.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score).count + 1
OverUserScore.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score)
OverUserScore.where(keyword: data.keyword, play_type: session[:play_type], user_type: over_user_type.user_type).where("score > ?", data.score)
OverUserScore.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score)
OverUserScores.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score)
over_user_type.over_user_scores.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score).count + 1
data.score
a
a.score
a.scire
a = over_user_type.over_user_scores.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score)
@data_hash["#{data.keyword}_rank"]
@data_hash["#{data.keyword}_rank"] = over_user_type.over_user_scores.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score).count + 1
over_user_type.over_user_scores.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score)
data.score
session[:play_type]
over_user_type.over_user_scores.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score)
over_user_type
over_user_type.over_user_scores.where(keyword: data.keyword, play_type: session[:play_type], user_type: over_user_type.user_type ).where("score > ?", data.score)
over_user_type.over_user_scores.where(keyword: data.keyword, play_type: session[:play_type]).where("score > ?", data.score)
c
@data_hash["자리야_처치 - 평균_local_rank"]
@data_hash["자리야_플레이 시간_rank"]
@data_hash
c
@data_hash["#{hero_name}_플레이 시간_rank"]
@data_hash
c
@data_hash
c
over_user_type.over_user_scores.where(keyword: "플레이 시간", user_type: over_user_type.user_type, play_type: session[:play_type]).where("score > ?", @data_hash["플레이 시간"]).count + 1
over_user_type.over_user_scores.where(keyword: "플레이 시간", user_type: over_user_type.user_type, play_type: session[:play_type]).where("score >= ?", @data_hash["플레이 시간"])
over_user_type.over_user_scores.where(keyword: "플레이 시간", user_type: over_user_type.user_type, play_type: session[:play_type]).where("score >= ?", @data_hash["플레이 시간"]).count + 1
over_user_type.over_user_scores.where(keyword: "플레이 시간", user_type: over_user_type.user_type, play_type: session[:play_type]).where("score >= ?", @data_hash["플레이 시간"])
over_user_type.over_user_scores.where(keyword: "플레이 시간", user_type: over_user_type.user_type, play_type: session[:play_type]).where("score >= ?", @data_hash["플레이 시간"]).count + 1
over_user_type.over_user_scores.where(keyword: "플레이 시간", user_type: over_user_type.user_type, play_type: session[:play_type]).where("score >= ?", @played_time.score).count + 1
over_user_type.over_user_scores.where(keyword: "플레이 시간", play_type: session[:play_type], user_type: over_user_type.user_type ).where("score >= ?", @data_hash["플레이 시간"])
over_user_type.over_user_scores.where(keyword: "플레이 시간", play_type: session[:play_type]).where("score >= ?", @data_hash["플레이 시간"])
@data_hash["플레이 시간"]
c
datas = over_user_type.over_user_scores.where(play_type: session[:play_type])
c
@offense_kd_rank = over_user_type.over_user_scores.where(keyword: "offense_KD", user_type: over_user_type.user_type).where("score < ?", @offense_kd.score).count + 1
@offense_kd_rank = over_user_type.over_user_scores.where(keyword: "offense_KD", user_type: over_user_type.user_type).where("value < ?", @offense_kd.score).count + 1
@offense_kd.@offense_kd_rank = over_user_type.over_user_scores.where(keyword: "offense_KD", user_type: over_user_type.user_type).where("value < ?", @offense_kd.
@offense_kd_rank = over_user_type.over_user_scores.where(keyword: "offense_KD", user_type: over_user_type.user_type).where("value < ?", @offense_kd.value).count + 1
@offense_kd = over_user_type.over_user_scores.where(keyword: "offense_KD", user_type: over_user_type.user_type, play_type: session[:play_type]).first
@offense_kd = over_user_type.over_user_scores.where(keyword: "offense_KD", user_type: over_user_type.user_type, play_type: session[:play_type]).limit(1)
@offense_kd.size
@offense_kd = over_user_type.over_user_scores.where(keyword: "offense_KD", user_type: over_user_type.user_type, play_type: session[:play_type])
@offense_kd.size
@offense_kd = over_user_type.over_user_scores.where(keyword: "offense_KD", user_type: over_user_type.user_type)
c
keyword_head
deaths
final_blows
deaths
eliminations
hero_type
c
@over_user_type.over_user_scores.where("play_type = ? and user_type = ? and keyword = ? and score >= ?", session[:play_type], "PC - KR" ,"#{hero_name}_처치 - 평균", @heros_hash[hero_name]["처치 - 평균"])
@heros_hash[hero_name]["처치 - 평균"]
@over_user_type.over_user_scores.where("play_type = ? and user_type = ? and keyword = ? and score >= ?", session[:play_type], "PC - KR" ,"#{hero_name}_처치 - 평균", @heros_hash[hero_name]["처치 - 평균"]).count + 1
c
@heros_hash[hero_name]
@heros_hash[hero_name]["평
@heros_hash[hero_name]["평균 처치"]
c
offense_hash[data.keyword]
c
n
data
offense_hash
data.value.delete(",").to_i
n
c
n
data.value.delete(",").to_i
c
n
data.value.delete(",").to_i
n
total_hash[data.keyword]
data.keyword
data.keyword && total_hash[data.keyword]
c
data.keyword
total_hash
c
over_user_type
c
@hero_names = over_user_type.over_hero_masters.where(play_type: session[:play_type], keyword: keyword, view_group: view_group).order("id asc").pluck(:hero_name)
over_user_type.over_hero_masters.where(play_type: session[:play_type], keyword: keyword, view_group: view_group).order("id desc").pluck(:hero_name)
over_user_type.over_hero_masters.where(play_type: session[:play_type], keyword: keyword, view_group: view_group).order("id desc")
over_user_type.over_hero_masters.where(play_type: session[:play_type], keyword: keyword, view_group: view_group).order(:id)
over_user_type.over_hero_masters.where(play_type: session[:play_type], keyword: keyword, view_group: view_group).pluck(:hero_name)
c
@hero_names
c
over_tag.over_user_types[0].over_hero_masters
over_tag.over_user_types[0]
over_tag.over_user_types[0].over_hero_masters.where(play_type: 2, keyword: "competitive_rank").first
c
exit
c
games_won
n
yesterday_data
yesterday_data = OverDailyDatum.where(over_tag_id: over_tag_id, play_type: play_type, hero_name: hero_name).where("created_at >= ? and created_at <= ?", Time.now.yesterday.beginning_of_day, Time.now.yesterday.end_of_day).first
n
over_daily_data
n
c
over_tag.over_user_types[0]
over_tag
over_tag.over_user_types[0].over_hero_masters
over_tag.over_user_types[0]
competitive_rank = over_tag.over_user_types[0].over_hero_masters.where(play_type: 2, keyword: "competitive_rank").first.value
c
over_tag.over_user_types[0].over_hero_masters.where(play_type: session[:play_type], keyword: main_hero_keyword, view_group: view_group).first.hero_name
over_tag.over_user_types[0].over_hero_masters.where(play_type: 2, keyword: "competitive_rank").first.value
c
@support_hero_hash
won_per
c
@support_hero_hash[hero].games_won_per
c
@support_hero_hash[hero].games_won_per
c
@support_hero_hash[hero].games_won_per
@support_won_top
c
@support_hero_hash[hero].games_won_per
@support_won_top
c
won_per.sort[-1]
won_per.sort
won_per.sort[-1]
won_per
time.sort![-1]
time.sort!
@offense_time_top = time.sort!
c
done
won_per
time
c
@hero_hash[hero]
c
@offense_hero_hash
c
@offense_hero_hash
@offense_hero_hash["#{hero}"].games_won_per
hero
@offense_hero_hash[hero]
c
@hero_hash.values
@hero_hash
c
@hero_hash.sort_by { |hsh| hsh["games_won_per"] }
@hero_hash.sort_by { |hsh| hsh[:games_won_per] }
@hero_hash
@hero_hash.values
@hero_hash.values.fetch("games_won_per")
@hero_hash.fetch("games_won_per")
@hero_hash.values[0].class
@hero_hash.values[0].size
@hero_hash.values[0]
@hero_hash.values.size
@hero_hash.values.class
@hero_hash.values
@hero_hash.class
@hero_hash.values.games_won_per
@hero_hash.values
@hero_hash.games_won_per
@hero_hash
c
@total_time_played.to_i
@total_time_played
OverRoleCalculation.where("play_type = ? and created_at between ? and ?", play_type, t.beginning_of_day, t.end_of_day).average(:time_played)
@total_time_played
c
@hero_hash
c
@hero_hash
c
@hero_hash
exit
c
n
time_played
c
@hero_hash["루시우"].games_won
@hero_hash["루시우"]
c
@hero_hash[hero]
hero = "루시우"
c
hero_data = OverDailyDatum.select("avg(games_won), avg(games_lost), avg(games_played), avg(games_won_per), avg(eliminations), avg(deaths), avg(final_blows), avg(kd), avg(kda), avg(healing_done_avr), avg(damage_done_avr)").where("hero_name = ? and play_type = ? and created_at between ? and ?",hero, play_type, search_day.beginning_of_day, search_day.end_of_day)
OverDailyDatum.where("hero_name = ? and play_type = ? and created_at between ? and ?",hero, play_type, search_day.beginning_of_day, search_day.end_of_day)
hero_data = OverDailyDatum.select("avg(games_won), avg(games_lost), avg(games_played), avg(games_won_per), avg(eliminations), avg(deaths), avg(final_blows), avg(kd), avg(kda), avg(healing_done_avr), avg(damage_done_avr)").where("hero_name = ? and play_type = ? and created_at between ? and ?",hero, play_type, search_day.beginning_of_day, search_day.end_of_day)
                                        .where("hero_name = ? and play_type = ? and created_at between ? and ?",hero, play_type, search_day.beginning_of_day, search_day.end_of_day)
                                        avg(eliminations), avg(deaths), avg(final_blows), avg(kd), avg(kda), avg(healing_done_avr), avg(damage_done_avr)")
hero_data = OverDailyDatum.select("avg(games_won), avg(games_lost), avg(games_played), avg(games_won_per), 
hero = "리퍼"
search_day.beginning_of_day
search_day = t - 0.days
t = Time.now
hero_data
c
search_day = t + 0.days
Time.now
search_day = t + 2.days
search_day = t - 1.days
hero_data
exit
c
n
c
hero_data
c
OFFENSE_HERO.each do |hero|
exit
over_daily_data.blank?
over_daily_data
over_daily_data.blank?
over_daily_data[0]
over_daily_data
over_daily_data = OverDailyDatum.where(over_tag_id: over_tag_id, play_type: play_type, hero_name: hero_name).where("created_at >= ? and created_at =< ?", Time.now.beginning_of_day, Time.now.end_of_day)
OverDailyDatum.where(over_tag_id: over_tag_id, play_type: play_type, hero_name: hero_name).where("created_at >= ? and created_at =< ?", Time.now.end_of_day)
Time.now.end_of_day
Time.now.beginning_of_day
